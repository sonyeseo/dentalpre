{"version":3,"sources":["../../stdin","own/_variables.scss","../../node_modules/compass-importer/.compass/compass-mixins-master/lib/compass/css3/_shared.scss","../../node_modules/compass-importer/.compass/compass-mixins-master/lib/compass/css3/_transform.scss"],"names":[],"mappings":"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","file":"vendors/checkboxes.css","sourcesContent":["@import \"compass/css3\";\n@import \"../own/variables\";\n\n.ac-custom {\n\n}\n\n.ac-custom h2 {\n  font-size: 3em;\n  font-weight: 300;\n  padding: 0 0 0.5em;\n  margin: 0 0 30px;\n}\n\n.ac-custom ul,\n.ac-custom ol {\n  list-style: none;\n  padding: 0;\n  margin: 0 auto;\n}\n\n.ac-custom li {\n  position: relative;\n  margin: 0 0 20px;\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n\n  &.color-green {\n    background-color: $brand-success;\n  }\n\n  &.color-green-hue {\n    background-color: $brand-success-hue;\n  }\n\n  &.color-blue {\n    background-color: $brand-primary;\n  }\n\n  &.color-red {\n    background-color: $brand-danger;\n  }\n\n  &.color-gold {\n    background-color: $brand-warning;\n  }\n\n  &.color-aqua {\n    background-color: $brand-info;\n  }\n}\n\n.ac-custom label {\n  display: inline-block;\n  position: relative;\n  font-size: 20px;\n  line-height: 36px;\n  min-height: 52px;\n  padding: 8px 0 8px 60px;\n  vertical-align: top;\n  cursor: pointer;\n  -webkit-transition: color 0.3s;\n  transition: color 0.3s;\n}\n\n.ac-custom input[type=\"checkbox\"],\n.ac-custom input[type=\"radio\"],\n.ac-custom label::before {\n  width: 30px;\n  height: 30px;\n  top: 50%;\n  left: 15px;\n  margin-top: -15px;\n  position: absolute;\n  cursor: pointer;\n}\n\n.ac-custom input[type=\"checkbox\"],\n.ac-custom input[type=\"radio\"] {\n  opacity: 0;\n  -webkit-appearance: none;\n  display: inline-block;\n  vertical-align: middle;\n  z-index: 100;\n}\n\n.ac-custom label::before {\n  content: '';\n  border: 2px solid transparent;\n  -webkit-transition: opacity 0.3s;\n  transition: opacity 0.3s;\n}\n\n.ac-radio label::before {\n  border-radius: 50%;\n}\n\n.ac-custom input[type=\"checkbox\"]:checked + label,\n.ac-custom input[type=\"radio\"]:checked + label {\n//\tcolor: #fff;\n}\n\n.ac-custom input[type=\"checkbox\"]:checked + label::before,\n.ac-custom input[type=\"radio\"]:checked + label::before {\n  opacity: 0.8;\n}\n\n/* General SVG and path styles */\n\n.ac-custom svg {\n  position: absolute;\n  width: 30px;\n  height: 30px;\n  top: 50%;\n  margin-top: -15px;\n  left: 15px;\n  pointer-events: none;\n  @include scale(0.7);\n  @include transform-origin(50%, 50%);\n}\n\n.ac-custom svg path {\n  stroke-width: 13px;\n  stroke-linecap: round;\n  stroke-linejoin: round;\n  fill: none;\n}\n\n/* Specific input, SVG and path styles */\n\n/* Circle */\n.ac-circle input[type=\"checkbox\"],\n.ac-circle input[type=\"radio\"],\n.ac-circle label::before {\n  width: 30px;\n  height: 30px;\n  margin-top: -15px;\n  left: 15px;\n  position: absolute;\n}\n\n.ac-circle label::before {\n  border: none;\n}\n\n.ac-circle svg {\n  width: 64px;\n  height: 64px;\n  margin-top: -32px;\n  left: -2px;\n}\n\n.ac-circle svg path {\n  stroke-width: 5px;\n}\n\n/* Box Fill */\n.ac-boxfill svg path {\n  stroke-width: 8px;\n}\n\n/* Swirl */\n.ac-swirl svg path {\n  stroke-width: 8px;\n}\n\n/* List */\n.ac-list ol {\n  list-style: decimal;\n  list-style-position: inside;\n  font-weight: 700;\n  font-size: 30px;\n  line-height: 52px;\n  text-indent: 18px;\n}\n\n.ac-list ol li {\n\n}\n\n.ac-list ol li label {\n  padding: 0;\n  font-weight: 400;\n  text-indent: 0;\n\n  span {\n    display: block;\n    line-height: 52px;\n  }\n}\n\n.ac-list label::before {\n  display: none;\n}\n\n.ac-list svg {\n  width: calc(100% - 24px);\n  height: 52px;\n  left: 12px;\n  top: 0;\n  margin-top: 0px;\n  @include scale(1);\n}\n\n.ac-list svg path {\n  stroke-width: 4px;\n}\n\n\n// White background\n\n.ac-custom {\n\n  label, ol {\n    color: $text-dark;\n  }\n\n  label::before {\n    border-color: lighten($text-dark, 30%);\n  }\n\n  svg path {\n    stroke: $text-dark;\n  }\n\n  &.ac-circle {\n    label::before {\n      background-color: lighten($text-dark, 30%);\n    }\n  }\n}\n\n\n// Color background\n\n$light-color: $brand-default;\n\n.ac-custom *[class^=\"color-\"] {\n\n  label {\n    color: $light-color;\n  }\n\n  label::before {\n    border-color: $light-color;\n  }\n\n  svg path {\n    stroke: $light-color;\n  }\n}\n\n.ac-custom.ac-circle *[class^=\"color-\"] {\n  label::before {\n    background-color: $light-color;\n  }\n}\n\n.ac-custom.ac-list ol *[class^=\"color-\"] {\n  color: $light-color;\n}\n","$support-min-width: 320px;\n\n$breakpoints: (\n  'xs': (max-width: $support-min-width),\n  'sm': (max-width: 768px),\n  'md': (max-width: 992px),\n  'lg': (max-width: 1200px)\n);\n\n@mixin media($breakpoint) {\n  @if map-has-key($breakpoints, $breakpoint) {\n    @media #{inspect(map-get($breakpoints, $breakpoint))} {\n      @content;\n    }\n  } @else {\n    @error 'Incorrect `#{$breakpoint}`. ';\n  }\n}\n\n$bezie-1: cubic-bezier(0.4, 1, 0.3, 1);\n$bezie-2: cubic-bezier(0,.42,.4,1.21);\n\n$font-family-sans-serif:  'Raleway', sans-serif !default;\n$font-family-serif:       'Roboto', sans-serif !default;\n\n\n$brand-default:           #ffffff;\n$brand-default-hue:       #d8d8d8;\n$brand-primary:           #7266ba;\n$brand-primary-hue:       #585b9c;\n$brand-success:           #46be8a;\n$brand-success-hue: \t  #41b181;\n$brand-info:              #39bee8;\n$brand-info-hue:          #34aed4;\n$brand-warning:           #f2a654;\n$brand-warning-hue:       #e39c4f;\n$brand-danger:            #ff69b4;\n$brand-danger-hue:        #e25da0;\n\n$text-light:      \t\t  #ffffff;\n$text-dark:      \t\t  #333333;\n\n$grid-padding: \t\t\t  20px;\n","@import \"../support\";\n\n// This mixin provides basic support for CSS3 properties and\n// their corresponding experimental CSS2 properties when\n// the implementations are identical except for the property\n// prefix.\n@mixin experimental($property, $value,\n  $moz      : $experimental-support-for-mozilla,\n  $webkit   : $experimental-support-for-webkit,\n  $o        : $experimental-support-for-opera,\n  $ms       : $experimental-support-for-microsoft,\n  $khtml    : $experimental-support-for-khtml,\n  $official : true\n) {\n  @if $webkit  and $experimental-support-for-webkit    { -webkit-#{$property} : $value; }\n  @if $khtml   and $experimental-support-for-khtml     {  -khtml-#{$property} : $value; }\n  @if $moz     and $experimental-support-for-mozilla   {    -moz-#{$property} : $value; }\n  @if $ms      and $experimental-support-for-microsoft {     -ms-#{$property} : $value; }\n  @if $o       and $experimental-support-for-opera     {      -o-#{$property} : $value; }\n  @if $official                                        {         #{$property} : $value; }\n}\n\n// Same as experimental(), but for cases when the property is the same and the value is vendorized\n@mixin experimental-value($property, $value,\n  $moz      : $experimental-support-for-mozilla,\n  $webkit   : $experimental-support-for-webkit,\n  $o        : $experimental-support-for-opera,\n  $ms       : $experimental-support-for-microsoft,\n  $khtml    : $experimental-support-for-khtml,\n  $official : true\n) {\n  @if $webkit  and $experimental-support-for-webkit    { #{$property} : -webkit-#{$value}; }\n  @if $khtml   and $experimental-support-for-khtml     { #{$property} :  -khtml-#{$value}; }\n  @if $moz     and $experimental-support-for-mozilla   { #{$property} :    -moz-#{$value}; }\n  @if $ms      and $experimental-support-for-microsoft { #{$property} :     -ms-#{$value}; }\n  @if $o       and $experimental-support-for-opera     { #{$property} :      -o-#{$value}; }\n  @if $official                                        { #{$property} :         #{$value}; }\n}\n","@import \"shared\";\n\n// @doc off\n// Note ----------------------------------------------------------------------\n// Safari, Chrome, and Firefox all support 3D transforms. However,\n// only in the most recent builds. You should also provide fallback 2d support for\n// Opera and IE. IE10 is slated to have 3d enabled, but is currently unreleased.\n// To make that easy, all 2D transforms include an browser-targeting toggle ($only3d)\n// to switch between the two support lists. The toggle defaults to 'false' (2D),\n// and also accepts 'true' (3D). Currently the lists are as follows:\n// 2D: Mozilla, Webkit, Opera, Official\n// 3D: Webkit, Firefox.\n\n// Available Transforms ------------------------------------------------------\n// - Scale (2d and 3d)\n// - Rotate (2d and 3d)\n// - Translate (2d and 3d)\n// - Skew (2d only)\n\n// Transform Parameters ------------------------------------------------------\n// - Transform Origin (2d and 3d)\n// - Perspective (3d)\n// - Perspective Origin (3d)\n// - Transform Style (3d)\n// - Backface Visibility (3d)\n\n// Mixins --------------------------------------------------------------------\n// transform-origin\n//  - shortcuts:  transform-origin2d, transform-origin3d\n//  - helpers:    apply-origin\n// transform\n//  - shortcuts:  transform2d, transform3d\n//  - helpers:    simple-transform, create-transform\n// perspective\n//  - helpers:    perspective-origin\n// transform-style\n// backface-visibility\n// scale\n//  - shortcuts:  scaleX, scaleY, scaleZ, scale3d\n// rotate\n//  - shortcuts:  rotateX, rotateY, rotate3d\n// translate\n//  - shortcuts:  translateX, translateY, translateZ, translate3d\n// skew\n//  - shortcuts:  skewX, skewY\n\n// Defaults ------------------------------------------------------------------\n// @doc on\n\n// The default x-origin for transforms\n$default-origin-x    : 50%                   !default;\n// The default y-origin for transforms\n$default-origin-y    : 50%                   !default;\n// The default z-origin for transforms\n$default-origin-z    : 50%                   !default;\n\n\n// The default x-multiplier for scaling\n$default-scale-x     : 1.25                  !default;\n// The default y-multiplier for scaling\n$default-scale-y     : $default-scale-x      !default;\n// The default z-multiplier for scaling\n$default-scale-z     : $default-scale-x      !default;\n\n\n// The default angle for rotations\n$default-rotate      : 45deg                 !default;\n\n\n// The default x-vector for the axis of 3d rotations\n$default-vector-x    : 1                     !default;\n// The default y-vector for the axis of 3d rotations\n$default-vector-y    : 1                     !default;\n// The default z-vector for the axis of 3d rotations\n$default-vector-z    : 1                     !default;\n\n\n// The default x-length for translations\n$default-translate-x : 1em                   !default;\n// The default y-length for translations\n$default-translate-y : $default-translate-x  !default;\n// The default z-length for translations\n$default-translate-z : $default-translate-x  !default;\n\n\n// The default x-angle for skewing\n$default-skew-x      : 5deg                  !default;\n// The default y-angle for skewing\n$default-skew-y      : 5deg                  !default;\n\n\n// **Transform-origin**\n// Transform-origin sent as a complete string\n//\n//     @include apply-origin( origin [, 3D-only ] )\n//\n// where 'origin' is a space separated list containing 1-3 (x/y/z) coordinates\n// in percentages, absolute (px, cm, in, em etc..) or relative\n// (left, top, right, bottom, center) units\n//\n// @param only3d Set this to true to only apply this\n// mixin where browsers have 3D support.\n@mixin apply-origin($origin, $only3d) {\n  $only3d: $only3d or -compass-list-size(-compass-list($origin)) > 2;\n  @if $only3d {\n    @include experimental(transform-origin, $origin,\n      -moz, -webkit, -o, -ms, not(-khtml), official\n    );\n  } @else {\n    @include experimental(transform-origin, $origin,\n      -moz, -webkit, -o, -ms, not(-khtml), official\n    );\n  }\n}\n\n// Transform-origin sent as individual arguments:\n//\n//     @include transform-origin( [ origin-x, origin-y, origin-z, 3D-only ] )\n//\n// where the 3 'origin-' arguments represent x/y/z coordinates.\n//\n// **NOTE:** setting z coordinates triggers 3D support list, leave false for 2D support\n@mixin transform-origin(\n  $origin-x: $default-origin-x,\n  $origin-y: $default-origin-y,\n  $origin-z: false,\n  $only3d:   if($origin-z, true, false)\n) {\n  $origin: unquote('');\n  @if $origin-x or $origin-y or $origin-z {\n    @if $origin-x { $origin: $origin-x; } @else { $origin: 50%; }\n    @if $origin-y { $origin: $origin $origin-y; } @else { @if $origin-z { $origin: $origin 50%; }}\n    @if $origin-z { $origin: $origin $origin-z; }\n    @include apply-origin($origin, $only3d);\n  }\n}\n\n\n// Transform sent as a complete string:\n//\n//     @include transform( transforms [, 3D-only ] )\n//\n// where 'transforms' is a space separated list of all the transforms to be applied.\n@mixin transform(\n  $transform,\n  $only3d: false\n) {\n  @if $only3d {\n    @include experimental(transform, $transform,\n      -moz, -webkit, -o, -ms, not(-khtml), official\n    );\n  } @else {\n    @include experimental(transform, $transform,\n      -moz, -webkit, -o, -ms, not(-khtml), official\n    );\n  }\n}\n\n// Shortcut to target all browsers with 2D transform support\n@mixin transform2d($trans) {\n  @include transform($trans, false);\n}\n\n// Shortcut to target only browsers with 3D transform support\n@mixin transform3d($trans) {\n  @include transform($trans, true);\n}\n\n// @doc off\n// 3D Parameters -------------------------------------------------------------\n// @doc on\n\n// Set the perspective of 3D transforms on the children of an element:\n//\n//      @include perspective( perspective )\n//\n// where 'perspective' is a unitless number representing the depth of the\n// z-axis. The higher the perspective, the more exaggerated the foreshortening.\n// values from 500 to 1000 are more-or-less \"normal\" - a good starting-point.\n@mixin perspective($p) {\n  @include experimental(perspective, $p,\n    -moz, -webkit, -o, -ms, not(-khtml), official\n  );\n}\n\n// Set the origin position for the perspective\n//\n//      @include perspective-origin(origin-x [origin-y])\n//\n// where the two arguments represent x/y coordinates\n@mixin perspective-origin($origin: 50%) {\n  @include experimental(perspective-origin, $origin,\n    -moz, -webkit, -o, -ms, not(-khtml), official\n  );\n}\n\n// Determine whether a 3D objects children also live in the given 3D space\n//\n//      @include transform-style( [ style ] )\n//\n// where `style` can be either `flat` or `preserve-3d`.\n// Browsers default to `flat`, mixin defaults to `preserve-3d`.\n@mixin transform-style($style: preserve-3d) {\n  @include experimental(transform-style, $style,\n    -moz, -webkit, -o, -ms, not(-khtml), official\n  );\n}\n\n// Determine the visibility of an element when it's back is turned\n//\n//     @include backface-visibility( [ visibility ] )\n//\n// where `visibility` can be either `visible` or `hidden`.\n// Browsers default to visible, mixin defaults to hidden\n@mixin backface-visibility($visibility: hidden) {\n  @include experimental(backface-visibility, $visibility,\n    -moz, -webkit, -o, -ms, not(-khtml), official\n  );\n}\n\n// @doc off\n// Transform Partials --------------------------------------------------------\n// These work well on their own, but they don't add to each other, they override.\n// Use along with transform parameter mixins to adjust origin, perspective and style\n// ---------------------------------------------------------------------------\n\n\n// Scale ---------------------------------------------------------------------\n// @doc on\n\n// Scale an object along the x and y axis:\n//\n//      @include scale( [ scale-x, scale-y, perspective, 3D-only ] )\n//\n// where the 'scale-' arguments are unitless multipliers of the x and y dimensions\n// and perspective, which works the same as the stand-alone perspective property/mixin\n// but applies to the individual element (multiplied with any parent perspective)\n//\n// **Note** This mixin cannot be combined with other transform mixins.\n@mixin scale(\n  $scale-x:     $default-scale-x,\n  $scale-y:     $scale-x,\n  $perspective: false,\n  $only3d:      false\n) {\n  $trans: scale($scale-x, $scale-y);\n  @if $perspective { $trans: perspective($perspective) $trans; }\n  @include transform($trans, $only3d);\n}\n\n// Scale an object along the x axis\n// @include scaleX( [ scale-x, perspective, 3D-only ] )\n//\n// **Note** This mixin cannot be combined with other transform mixins.\n@mixin scaleX(\n  $scale:       $default-scale-x,\n  $perspective: false,\n  $only3d:      false\n) {\n  $trans: scaleX($scale);\n  @if $perspective { $trans: perspective($perspective) $trans; }\n  @include transform($trans, $only3d);\n}\n\n// Scale an object along the y axis\n// @include scaleY( [ scale-y, perspective, 3D-only ] )\n//\n// **Note** This mixin cannot be combined with other transform mixins.\n@mixin scaleY(\n  $scale:       $default-scale-y,\n  $perspective: false,\n  $only3d:      false\n) {\n  $trans: scaleY($scale);\n  @if $perspective { $trans: perspective($perspective) $trans; }\n  @include transform($trans, $only3d);\n}\n\n// Scale an object along the z axis\n// @include scaleZ( [ scale-z, perspective ] )\n//\n// **Note** This mixin cannot be combined with other transform mixins.\n@mixin scaleZ(\n  $scale: $default-scale-z,\n  $perspective: false\n) {\n  $trans: scaleZ($scale);\n  @if $perspective { $trans: perspective($perspective) $trans; }\n  @include transform3d($trans);\n}\n\n// Scale and object along all three axis\n// @include scale3d( [ scale-x, scale-y, scale-z, perspective ] )\n//\n// **Note** This mixin cannot be combined with other transform mixins.\n@mixin scale3d(\n  $scale-x:     $default-scale-x,\n  $scale-y:     $default-scale-y,\n  $scale-z:     $default-scale-z,\n  $perspective: false\n) {\n  $trans: scale3d($scale-x, $scale-y, $scale-z);\n  @if $perspective { $trans: perspective($perspective) $trans; }\n  @include transform3d($trans);\n}\n\n// @doc off\n// Rotate --------------------------------------------------------------------\n// @doc on\n\n// Rotate an object around the z axis  (2D)\n// @include rotate( [ rotation, perspective, 3D-only ] )\n// where 'rotation' is an angle set in degrees (deg) or radian (rad) units\n//\n// **Note** This mixin cannot be combined with other transform mixins.\n@mixin rotate(\n  $rotate:      $default-rotate,\n  $perspective: false,\n  $only3d:      false\n) {\n  $trans: rotate($rotate);\n  @if $perspective { $trans: perspective($perspective) $trans; }\n  @include transform($trans, $only3d);\n}\n\n// A longcut for 'rotate' in case you forget that 'z' is implied\n//\n// **Note** This mixin cannot be combined with other transform mixins.\n@mixin rotateZ(\n  $rotate:      $default-rotate,\n  $perspective: false,\n  $only3d:      false\n) {\n  @include rotate($rotate, $perspective, $only3d);\n}\n\n// Rotate an object around the x axis (3D)\n// @include rotateX( [ rotation, perspective ] )\n//\n// **Note** This mixin cannot be combined with other transform mixins.\n@mixin rotateX(\n  $rotate: $default-rotate,\n  $perspective: false\n) {\n  $trans: rotateX($rotate);\n  @if $perspective { $trans: perspective($perspective) $trans; }\n  @include transform3d($trans);\n}\n\n// Rotate an object around the y axis (3D)\n// @include rotate( [ rotation, perspective ] )\n//\n// **Note** This mixin cannot be combined with other transform mixins.\n@mixin rotateY(\n  $rotate: $default-rotate,\n  $perspective: false\n) {\n  $trans: rotateY($rotate);\n  @if $perspective { $trans: perspective($perspective) $trans; }\n  @include transform3d($trans);\n}\n\n// Rotate an object around an arbitrary axis (3D)\n// @include rotate( [ vector-x, vector-y, vector-z, rotation, perspective ] )\n// where the 'vector-' arguments accept unitless numbers.\n// These numbers are not important on their own, but in relation to one another\n// creating an axis from your transform-origin, along the axis of Xx = Yy = Zz.\n//\n// **Note** This mixin cannot be combined with other transform mixins.\n@mixin rotate3d(\n  $vector-x: $default-vector-x,\n  $vector-y: $default-vector-y,\n  $vector-z: $default-vector-z,\n  $rotate: $default-rotate,\n  $perspective: false\n) {\n  $trans: rotate3d($vector-x, $vector-y, $vector-z, $rotate);\n  @if $perspective { $trans: perspective($perspective) $trans; }\n  @include transform3d($trans);\n}\n\n// @doc off\n// Translate -----------------------------------------------------------------\n// @doc on\n\n// Move an object along the x or y axis (2D)\n// @include translate( [ translate-x, translate-y, perspective, 3D-only ] )\n// where the 'translate-' arguments accept any distance in percentages or absolute (px, cm, in, em etc..) units.\n//\n// **Note** This mixin cannot be combined with other transform mixins.\n@mixin translate(\n  $translate-x: $default-translate-x,\n  $translate-y: $default-translate-y,\n  $perspective: false,\n  $only3d:      false\n) {\n  $trans: translate($translate-x, $translate-y);\n  @if $perspective { $trans: perspective($perspective) $trans; }\n  @include transform($trans, $only3d);\n}\n\n// Move an object along the x axis (2D)\n// @include translate( [ translate-x, perspective, 3D-only ] )\n//\n// **Note** This mixin cannot be combined with other transform mixins.\n@mixin translateX(\n  $trans-x:     $default-translate-x,\n  $perspective: false,\n  $only3d:      false\n) {\n  $trans: translateX($trans-x);\n  @if $perspective { $trans: perspective($perspective) $trans; }\n  @include transform($trans, $only3d);\n}\n\n// Move an object along the y axis (2D)\n// @include translate( [ translate-y, perspective, 3D-only ] )\n//\n// **Note** This mixin cannot be combined with other transform mixins.\n@mixin translateY(\n  $trans-y:     $default-translate-y,\n  $perspective: false,\n  $only3d:      false\n) {\n  $trans: translateY($trans-y);\n  @if $perspective { $trans: perspective($perspective) $trans; }\n  @include transform($trans, $only3d);\n}\n\n// Move an object along the z axis (3D)\n// @include translate( [ translate-z, perspective ] )\n//\n// **Note** This mixin cannot be combined with other transform mixins.\n@mixin translateZ(\n  $trans-z:     $default-translate-z,\n  $perspective: false\n) {\n  $trans: translateZ($trans-z);\n  @if $perspective { $trans: perspective($perspective) $trans; }\n  @include transform3d($trans);\n}\n\n// Move an object along the x, y and z axis (3D)\n// @include translate( [ translate-x, translate-y, translate-z, perspective ] )\n//\n// **Note** This mixin cannot be combined with other transform mixins.\n@mixin translate3d(\n  $translate-x: $default-translate-x,\n  $translate-y: $default-translate-y,\n  $translate-z: $default-translate-z,\n  $perspective: false\n) {\n  $trans: translate3d($translate-x, $translate-y, $translate-z);\n  @if $perspective { $trans: perspective($perspective) $trans; }\n  @include transform3d($trans);\n}\n\n// @doc off\n// Skew ----------------------------------------------------------------------\n// @doc on\n\n// Skew an element:\n//\n//     @include skew( [ skew-x, skew-y, 3D-only ] )\n//\n// where the 'skew-' arguments accept css angles in degrees (deg) or radian (rad) units.\n//\n// **Note** This mixin cannot be combined with other transform mixins.\n@mixin skew(\n  $skew-x: $default-skew-x,\n  $skew-y: $default-skew-y,\n  $only3d: false\n) {\n  $trans: skew($skew-x, $skew-y);\n  @include transform($trans, $only3d);\n}\n\n// Skew an element along the x axiz\n//\n//     @include skew( [ skew-x, 3D-only ] )\n//\n// **Note** This mixin cannot be combined with other transform mixins.\n@mixin skewX(\n  $skew-x: $default-skew-x,\n  $only3d: false\n) {\n  $trans: skewX($skew-x);\n  @include transform($trans, $only3d);\n}\n\n// Skew an element along the y axis\n//\n//     @include skew( [ skew-y, 3D-only ] )\n//\n// **Note** This mixin cannot be combined with other transform mixins.\n@mixin skewY(\n  $skew-y: $default-skew-y,\n  $only3d: false\n) {\n  $trans: skewY($skew-y);\n  @include transform($trans, $only3d);\n}\n\n\n// Full transform mixins\n// For settings any combination of transforms as arguments\n// These are complex and not highly recommended for daily use. They are mainly\n// here for backward-compatibility purposes.\n//\n// * they include origin adjustments\n// * scale takes a multiplier (unitless), rotate and skew take degrees (deg)\n//\n// **Note** This mixin cannot be combined with other transform mixins.\n@mixin create-transform(\n  $perspective: false,\n  $scale-x:     false,\n  $scale-y:     false,\n  $scale-z:     false,\n  $rotate-x:    false,\n  $rotate-y:    false,\n  $rotate-z:    false,\n  $rotate3d:    false,\n  $trans-x:     false,\n  $trans-y:     false,\n  $trans-z:     false,\n  $skew-x:      false,\n  $skew-y:      false,\n  $origin-x:    false,\n  $origin-y:    false,\n  $origin-z:    false,\n  $only3d:      false\n) {\n  $trans: unquote(\"\");\n\n  // perspective\n  @if $perspective { $trans: perspective($perspective) ; }\n\n  // scale\n  @if $scale-x and $scale-y {\n    @if $scale-z { $trans: $trans scale3d($scale-x, $scale-y, $scale-z); }\n    @else { $trans: $trans scale($scale-x, $scale-y); }\n  } @else {\n    @if $scale-x { $trans: $trans scaleX($scale-x); }\n    @if $scale-y { $trans: $trans scaleY($scale-y); }\n    @if $scale-z { $trans: $trans scaleZ($scale-z); }\n  }\n\n  // rotate\n  @if $rotate-x { $trans: $trans rotateX($rotate-x); }\n  @if $rotate-y { $trans: $trans rotateY($rotate-y); }\n  @if $rotate-z { $trans: $trans rotateZ($rotate-z); }\n  @if $rotate3d { $trans: $trans rotate3d($rotate3d); }\n\n  // translate\n  @if $trans-x and $trans-y {\n    @if $trans-z { $trans: $trans translate3d($trans-x, $trans-y, $trans-z); }\n    @else { $trans: $trans translate($trans-x, $trans-y); }\n  } @else {\n    @if $trans-x { $trans: $trans translateX($trans-x); }\n    @if $trans-y { $trans: $trans translateY($trans-y); }\n    @if $trans-z { $trans: $trans translateZ($trans-z); }\n  }\n\n  // skew\n  @if $skew-x and $skew-y { $trans: $trans skew($skew-x, $skew-y); }\n  @else {\n    @if $skew-x { $trans: $trans skewX($skew-x); }\n    @if $skew-y { $trans: $trans skewY($skew-y); }\n  }\n\n  // apply it!\n  @include transform($trans, $only3d);\n  @include transform-origin($origin-x, $origin-y, $origin-z, $only3d);\n}\n\n\n// A simplified set of options\n// backwards-compatible with the previous version of the 'transform' mixin\n@mixin simple-transform(\n  $scale:    false,\n  $rotate:   false,\n  $trans-x:  false,\n  $trans-y:  false,\n  $skew-x:   false,\n  $skew-y:   false,\n  $origin-x: false,\n  $origin-y: false\n) {\n  @include create-transform(\n    false,\n    $scale, $scale, false,\n    false, false, $rotate, false,\n    $trans-x, $trans-y, false,\n    $skew-x, $skew-y,\n    $origin-x, $origin-y, false,\n    false\n  );\n}\n"],"sourceRoot":"/source/"}